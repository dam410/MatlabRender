close all;

%% Render and display following direct specification
N = [0;1;0];
d = 2;
S = [0;0.5;7];
ks = 0.0;
kd = 1.0-ks;
Lj = 0.9;
D = [0.3;-0.5;-0.8];
D = D/norm(D);
mu = 5;
h= 720;
l = 1080;
K= eye(3);
U_c = [510;420];
[I] = render_shading_isocontour(h,l,...
	'Surface','Plane',...
	'LightType','SLS',...
	'Scattering','Phong',...
	'SurfaceParameters',[N;d],...
	'LightParameters',[S;D;Lj;mu],...
	'ScatteringParameters',[kd,ks],...
	'CameraIntrinsic',K);
figure('Name','Rendered image using direct input parameters');
imshow(I);

% Render and display following JSON file
[meshes,cameras,lights,renders] = decode_json_blender('scene_example.json');
[I_test,~,~,~,P_camera] = render_shading_isocontour(l,h,...
                        'Surface','Meshes',...
                        'Meshes',meshes,...
                        'Scattering','Phong',...
                        'Light',lights,...
                        'Camera',cameras,...
                        'Renderer',renders,...
                        'UseImageTransformation',1);
figure('Name','Rendered image using a specified json file');
imshow(I_test);

% Render a cube
[meshes,cameras,lights,renders] = decode_json_blender('test_cube.json');
[I_test_cube,~,~,~,P_camera] = render_shading_isocontour(l,h,...
                        'Surface','Meshes',...
                        'Meshes',meshes,...
                        'Scattering','Phong',...
                        'Light',lights,...
                        'Camera',cameras,...
                        'Renderer',renders,...
                        'UseImageTransformation',1);
figure('Name','Rendered image using a specified json file (cube)');
imshow(I_test_cube);



